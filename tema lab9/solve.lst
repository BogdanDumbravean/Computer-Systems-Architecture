     1                                  bits 32
     2                                  
     3                                  global _solve
     4                                  
     5                                  segment data use32 class=data
     6 00000000 00                          len db 0
     7 00000001 00000000                    AddressP dd 0
     8 00000005 00                          lenp db 0
     9 00000006 00000000                    AddressN dd 0
    10 0000000A 00                          lenn db 0
    11                                  
    12                                  segment code use32 class=code public 
    13                                  _solve:
    14                                  	; creating a stack frame for the called program
    15 00000000 55                      	push ebp
    16 00000001 89E5                    	mov ebp, esp
    17                                  
    18 00000003 8B4D08                      mov ecx, [ebp + 8]  ; mov len in ecx
    19 00000006 8B750C                      mov esi, [ebp + 12]  ; move sir in esi
    20                                  	; Move the addresses of arrays P and N
    21 00000009 8B4510                  	mov eax, [ebp + 16]	
    22 0000000C A3[01000000]            	mov [AddressP], eax
    23 00000011 8B4514                  	mov eax, [ebp + 20]
    24 00000014 A3[06000000]            	mov [AddressN], eax
    25                                  
    26 00000019 E376                        jecxz theend
    27                                      repeat:
    28 0000001B 803E20                          cmp byte[esi], ' '
    29 0000001E 746E                            je addnrepeat
    30 00000020 803E2D                          cmp byte[esi], '-'
    31 00000023 7434                            je addneg
    32                                              
    33                                          addpos:
    34                                              
    35 00000025 FE05[05000000]                  inc byte[lenp]          ; increase the length of the positive numbers array
    36                                          looppos: ; we compute the next number and add it to the positive numbers array
    37 0000002B 8B3D[01000000]                      mov edi, [AddressP]
    38 00000031 B800000000                          mov eax, 0
    39 00000036 A0[05000000]                        mov al, [lenp]
    40 0000003B FEC8                                dec al
    41 0000003D 01C7                                add edi, eax    ; take the value that is already on that position
    42                                                  
    43 0000003F 8A07                                mov al, [edi]   ; multiply it by 10 
    44 00000041 B30A                                mov bl, 10
    45 00000043 F6E3                                mul bl
    46 00000045 8807                                mov [edi], al
    47                                                  
    48 00000047 AC                                  lodsb
    49 00000048 2C30                                sub al, 30h       ; we subtract 30h from al to transform the character of a digit into the digit itself
    50 0000004A 0207                                add al, [edi]
    51 0000004C AA                                  stosb
    52                                                  
    53 0000004D 803E00                              cmp byte[esi], 0    ; check for end of array
    54 00000050 743F                                je theend  
    55                                                  
    56 00000052 803E20                              cmp byte[esi], ' '
    57 00000055 75D4                                jne looppos        ; check if we are out of digits, in which case stop the loop
    58 00000057 EB36                            jmp endrepeat
    59                                              
    60                                          addneg: ; we compute the next number and add it to the negative numbers array
    61 00000059 46                              inc esi ; we pass the '-' sign
    62 0000005A FE05[0A000000]                  inc byte[lenn]          ; increase the length of the negative numbers array
    63                                          loopneg:
    64 00000060 8B3D[06000000]                      mov edi, [AddressN]
    65 00000066 B800000000                          mov eax, 0
    66 0000006B A0[0A000000]                        mov al, [lenn]
    67 00000070 FEC8                                dec al
    68 00000072 01C7                                add edi, eax    ; take the value that is already on that position
    69                                                  
    70 00000074 8A07                                mov al, [edi]   ; multiply it by 10 
    71 00000076 B30A                                mov bl, 10
    72 00000078 F6E3                                mul bl
    73 0000007A 8807                                mov [edi], al
    74                                                  
    75 0000007C AC                                  lodsb
    76 0000007D 2C30                                sub al, 30h       ; we subtract 30h from edi to transform the character of a digit into the digit itself
    77 0000007F 0207                                add al, [edi]
    78 00000081 AA                                  stosb
    79                                                  
    80 00000082 803E00                              cmp byte[esi], 0    ; check for end of array
    81 00000085 740A                                je theend       
    82                                                  
    83 00000087 803E20                              cmp byte[esi], ' '
    84 0000008A 75D4                                jne loopneg        ; check if we are out of digits, in which case stop the loop
    85 0000008C EB01                            jmp endrepeat
    86                                              
    87                                          addnrepeat:
    88 0000008E 46                              inc esi
    89                                          endrepeat: 
    90 0000008F E28A                            loop repeat
    91                                              
    92                                      theend:
    93                                  	; restore the stack frame for the caller program
    94 00000091 89EC                    	mov esp, ebp
    95 00000093 5D                      	pop ebp
    96                                  
    97 00000094 C3                          ret
